#region junior String to integer
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//First training about converting string into integer.
//Lvl junior
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using Training_LowToExpert;

string trainingString = "0123456789";
var trainingChars = trainingString.ToCharArray();



//At the begining i need to see codes that are represented by numbers.
trainingChars.ToList().ForEach(x => {

    int ohlol = x;
    //Console.WriteLine(ohlol);
});

//48 -> 0
//49 -> 1
//50
//51
//52
//53
//54
//55
//56
//57 -> 9


//Now when i have all important info i can try to convert it back.

int number = 48;
char somechar = (char)number;

//Console.WriteLine(somechar);

//Looks like it is fine. Now i can try to pass string as parameter and do some operations inside class ParseStringToIntegerJuniority.

ParseStringToIntegerJuniority parser = new ParseStringToIntegerJuniority();

int parsedValue = parser.Parse("123");
//Console.WriteLine(parsedValue);

//This is my code for solution above ^ 
//public int Parse(string input)
//{
//    var obj = input.ToCharArray();
//    int value = 0;
//    for (int i = obj.Length - 1, j = 0; i >= 0; i--, j++)
//    {
//        byte smallChunk = (byte)obj[i];
//        if (CheckIfChunkIsNumber(smallChunk))
//        {
//            int number = smallChunk - 48;
//            value += number * (int)Math.Pow(10, j);
//        }

//        else
//        {
//            throw new InvalidCastException("Provided string is not a number");
//        }
//    }

//    return value;
//}

//private bool CheckIfChunkIsNumber(byte namllChunk)
//{
//    if (namllChunk > 47 && namllChunk < 58)
//        return true;

//    return false;
//}

//But.. What if i need to check if provided number is negative?

//Firstly i need to check if at the begin of the string is '-'. if yes then number will be returned as negative.

parsedValue = parser.Parse("-123");
//Console.WriteLine(parsedValue);



//Time to test:
//parsedValue = parser.Parse("-12a3");
//Console.WriteLine(parsedValue); //EXCEPTION HAS BEEN THROWN


//parsedValue = parser.Parse("-a123");
//Console.WriteLine(parsedValue); //EXCEPTION HAS BEEN THROWN

//parsedValue = parser.Parse("-123a");
//Console.WriteLine(parsedValue); //EXCEPTION HAS BEEN THROWN

//parsedValue = parser.Parse(" 123");
//Console.WriteLine(parsedValue); //EXCEPTION HAS BEEN THROWN

//parsedValue = parser.Parse("");
//Console.WriteLine(parsedValue); //EXCEPTION HAS BEEN THROWN

//parsedValue = parser.Parse(" ");
//Console.WriteLine(parsedValue); //EXCEPTION HAS BEEN THROWN

//So it works, my code is saved in the ParseStringToIntegerJuniority class ;) 
#endregion
#region better junior String into integer
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//First training about converting string into integer.
//Lvl junior+
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//Code above works. But.... 
//Its easy to say its quite bad code. Maybe some entry level junior would write this in few hours but its not the right code.
//Right here we will improve solution a little. 
//First we need to change something in for loop. This loop were made in crazy way, so we need to remove second argument.
//After that we focus on Math.Pow operation inside loop. It was so so so unneccessary.
//After that we will add some empty string validation. I think it will improve code some way!
//And we change a little bit of naming of variables,
//Exception handling may be done in better way.


StringToIntegerJuniorityPlus stringToIntegerJuniorPlus = new StringToIntegerJuniorityPlus();
//int parsedValueJuniorPlus = stringToIntegerJuniorPlus.Parse("123");
//Console.WriteLine(parsedValueJuniorPlus); // Works fine.
//parsedValueJuniorPlus = stringToIntegerJuniorPlus.Parse("-123");
//Console.WriteLine(parsedValueJuniorPlus); // Works fine.

//parsedValueJuniorPlus = stringToIntegerJuniorPlus.Parse("a-123"); // Throws an error
//parsedValueJuniorPlus = stringToIntegerJuniorPlus.Parse("--123"); // Throws error
//parsedValueJuniorPlus = stringToIntegerJuniorPlus.Parse(""); // Throws error
//parsedValueJuniorPlus = stringToIntegerJuniorPlus.Parse(" "); // Throws error

//Whole code is in class StringToIntegerJuniorityPlus.
#endregion
#region mid String into integer
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//First training about converting string into integer.
//Lvl mid
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//So code above work quite well... but there are some changes that may be improved.
//For mid level I will add startIndex and simplify the code. Iterating from backward was fun and easy, but we can just multiply whole number by 10 and move from 0 index.
//I will add usage for char.IsDigit, which remove extra function from class.
//Usage of ? operator is added, which removing one if statement
//Improved solution via renaming variables to be even more representative
//And finally there is need to check overflow. It may be problematic if someone will pass long string.
StringToIntegerMid stringToIntMid = new StringToIntegerMid();

int stringToIntMidValue;
//Console.WriteLine(stringToIntMidValue);
//stringToIntMidValue = stringToIntMid.Parse("-123");
//stringToIntMidValue = stringToIntMid.Parse("2147483647");
//stringToIntMidValue = stringToIntMid.Parse("--123"); //ERROR
//stringToIntMidValue = stringToIntMid.Parse("-123a"); //ERROR
//stringToIntMidValue = stringToIntMid.Parse("aaaa"); //ERROR
//stringToIntMidValue = stringToIntMid.Parse("2147483648"); //OVERFLOW ERROR



//So code is clear,fast and written with best practices now!
//There are some nuances that higher lever programmers would improve but solution is quite solid!
//Whole thing took me around 3 hours ;_;
#endregion

#region integer to string
//There are so many simple solutions how to convert int to string, that writing own converter seems stupid.

//But i will try. Jump into class intToStringMid to see my solution, it will be similar as solution for string to integer.

IntToStringMid itsMid = new IntToStringMid();
Console.WriteLine(itsMid.Parse(0));
#endregion


